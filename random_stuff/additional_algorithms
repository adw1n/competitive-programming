ternary search
double l = a, r = b;
 
for(int i=0; i<200; i++) {
  double l1 = (l*2+r)/3;
  double l2 = (l+2*r)/3;
  if(f(l1) > f(l2)) r = l2; else l = l1;
  }
 
x = l; //(error at most (2/3)^200)

Euler’s totient function -The number of positive integers, not greater than n, and relatively prime with n, equals to Euler’s totient function φ (n). In symbols we can state that

1.If p is prime, then φ (p) = p – 1 and φ (pa) = p a * (1 – 1/p) for any a.
2.If m and n are coprime, then φ (m * n) = φ (m) * φ (n).
3.If n = , then Euler function can be found using formula:
φ (n) = n * (1 – 1/p 1) * (1 – 1/p 2) * ... * (1 – 1/p k)

The function fi(n) finds the value of φ(n):

     int fi(int n) 
     { 
       int result = n; 
       for(int i=2;i*i <= n;i++) 
       { 
         if (n % i == 0) result -= result / i; 
         while (n % i == 0) n /= i; 
       } 
       if (n > 1) result -= result / n; 
       return result; 
     } 

Fermat’s little theorem:
If p is a prime number, then for any integer a that is coprime to n, we have
a^p ≡ a (mod p)

This theorem can also be stated as: If p is a prime number and a is coprime to p, then
a^(p -1) ≡ 1 (mod p)

The number of divisors:
If n = p1^a1+p2^a2+…., then the number of its positive divisors equals to
(a1 + 1) * (a2 + 1) * … * (ak + 1)

floyd-warshall
for(i=1 to n) adj[i][j]=0;
for (k = 1 to n)
 for (i = 1 to n)
  for (j = 1 to n)
   adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);

int N; // number of vertices
vvi W; // lists of adjacent vertices
     
 bool check_graph_connected_bfs() { 
      int start_vertex = 0; 
      vi V(N, false); 
      queue<int> Q; 
      Q.push(start_vertex); 
      V[start_vertex] = true; 
      while(!Q.empty()) { 
           int i = Q.front(); 
           // get the tail element from queue
           Q.pop(); 
           tr(W[i], it) { 
                if(!V[*it]) { 
                     V[*it] = true; 
                     Q.push(*it); 
                } 
           } 
      } 
      return (find(all(V), 0) == V.end()); 
 }  


priority_queue<ii,vector<ii>, greater<ii> > Q; 
      // priority_queue with reverse comparison operator, 
      // so top() will return the least distance
      // initialize the start vertex, suppose it’s zero

Dijikstra
vi D(N, 987654321);

      // start vertex
      set<ii> Q;
      D[0] = 0;
      Q.insert(ii(0,0));
 
      while(!Q.empty()) {

           // again, fetch the closest to start element 
           // from “queue” organized via set
           ii top = *Q.begin();
           Q.erase(Q.begin());
           int v = top.second, d = top.first;
 
           // here we do not need to check whether the distance 
           // is perfect, because new vertices will always
           // add up in proper way in this implementation

           tr(G[v], it) {
                int v2 = it->first, cost = it->second;
                if(D[v2] > D[v] + cost) {
                     // this operation can not be done with priority_queue, 
                     // because it does not support DECREASE_KEY
                     if(D[v2] != 987654321) {
                           Q.erase(Q.find(ii(D[v2],v2)));
                     }
                     D[v2] = D[v] + cost;
                     Q.insert(ii(D[v2], v2));
                }
           }
      }